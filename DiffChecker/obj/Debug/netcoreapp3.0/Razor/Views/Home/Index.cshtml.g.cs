#pragma checksum "D:\DiffChecker\DiffChecker\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "100e2037afe4a062d27dffc0bf780ac91953176c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"100e2037afe4a062d27dffc0bf780ac91953176c", @"/Views/Home/Index.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "D:\DiffChecker\DiffChecker\Views\Home\Index.cshtml"
  
    Layout = null;

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n<HTML>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("HEAD", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "100e2037afe4a062d27dffc0bf780ac91953176c2963", async() => {
                WriteLiteral("\r\n    <TITLE>Diff, Match and Patch: Demo of Diff</TITLE>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("BODY", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "100e2037afe4a062d27dffc0bf780ac91953176c3991", async() => {
                WriteLiteral(@"
    <H1>Diff, Match and Patch</H1>
    <H2>Demo of Diff</H2>

    <P>
        Diff takes two texts and finds the differences.  This implementation works on a character by character basis.
        The result of any diff may contain 'chaff', irrelevant small commonalities which complicate the output.
        A post-diff cleanup algorithm factors out these trivial commonalities.
    </P>
    <script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js""></script>
    <SCRIPT>

	function launch(){
	var text1 = document.getElementById('text1').value;
  	var text2 = document.getElementById('text2').value;
	   $.ajax({
            url: ""../../api/Diff"",
            dataType: ""json"",
            type: ""POST"",
            data: {
                PartnerName: $(""#PartnerName"").val(),
                ClientName: $(""#ClientName"").val(),
                CompanyName: $(""#CompanyName"").val(),
                IllustrationUniqueReference: $(""#IllustrationUniqueReference"").val(),
      ");
                WriteLiteral(@"          IllustrationFrom: $(""#IllustrationFrom"").val(),
                IllustrationTo: $(""#IllustrationTo"").val()
            },

            success: function (response, textStatus, jqXHR) {
            	debugger;
            	var d = response
            	var ds = dmp.diff_prettyHtml(d);

            },
            error: function (jqXHR, textStatus, errorThrown) {

            }
        });
	};
    </SCRIPT>

    <FORM action=""#"" onsubmit=""return false"">
        <TABLE WIDTH=""100%"">
            <TR>
                <TD WIDTH=""50%"">
                    <H3>Text Version 1:</H3>
<TEXTAREA ID=""text1"" STYLE=""width: 100%"" ROWS=10>I am the very model of a modern Major-General,
I've information vegetable, animal, and mineral,
I know the kings of England, and I quote the fights historical,
From Marathon to Waterloo, in order categorical.</TEXTAREA>
                </TD>
                <TD WIDTH=""50%"">
                    <H3>Text Version 2:</H3>
<TEXTAREA ID=""text2"" STYLE=""width: 10");
                WriteLiteral(@"0%"" ROWS=10>I am the very model of a cartoon individual,
My animation's comical, unusual, and whimsical,
I'm quite adept at funny gags, comedic theory I have read,
From wicked puns and stupid jokes to anvils that drop on your head.</TEXTAREA>
                </TD>
            </TR>
        </TABLE>

        <H3>Diff timeout:</H3>
        <P>
            <INPUT TYPE=""text"" SIZE=3 MAXLENGTH=5 VALUE=""1"" ID=""timeout""> seconds<BR>
            If the mapping phase of the diff computation takes longer than this, then the computation
            is truncated and the best solution to date is returned.  While guaranteed to be correct,
            it may not be optimal.  A timeout of '0' allows for unlimited computation.
        </P>

        <H3>Post-diff cleanup:</H3>
        <DL>
            <DT>
                <INPUT TYPE=""radio"" NAME=""cleanup"" ID=""semantic"" CHECKED>
                <LABEL FOR=""semantic"">Semantic Cleanup</LABEL>
            </DT>
            <DD>
                Increase huma");
                WriteLiteral(@"n readability by factoring out commonalities which are likely to be
                coincidental.
            </DD>
            <DT>
                <INPUT TYPE=""radio"" NAME=""cleanup"" ID=""efficiency"">
                <LABEL FOR=""efficiency"">Efficiency Cleanup</LABEL>,
                edit cost: <INPUT TYPE=""text"" SIZE=3 MAXLENGTH=5 VALUE=""4"" ID=""editcost"">
            <DD>
                Increase computational efficiency by factoring out short commonalities which are
                not worth the overhead.  The larger the edit cost, the more aggressive the cleanup.
            </DD>
            <DT>
                <INPUT TYPE=""radio"" NAME=""cleanup"" ID=""raw"">
                <LABEL FOR=""raw"">No Cleanup</LABEL>
            </DT>
            <DD>Raw output.</DD>
        </DL>

        <P><INPUT TYPE=""button"" onClick=""launch()"" VALUE=""Compute Diff""></P>
    </FORM>

    <DIV ID=""outputdiv""></DIV>

    <HR>
    Back to <A HREF=""https://github.com/google/diff-match-patch"">Diff, Match and P");
                WriteLiteral("atch</A>\r\n\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</HTML>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
